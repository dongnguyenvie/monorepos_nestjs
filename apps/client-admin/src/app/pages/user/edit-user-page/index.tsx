import { Form, Input, Select, Divider, Typography, Button, notification, Row, Col, Alert } from 'antd'
import { Spin } from 'app/components/Spin'
import { useGetRolesQuery, useGetUserQuery, useUpdateUserByAdminMutation } from 'graphql/autogenerated'
import React, { useEffect, useMemo } from 'react'
import { useHistory } from 'react-router-dom'
import { MESSAGES } from 'utils/constants'
const { Option } = Select
const { Title } = Typography

export function EditUserPage(props) {
  const id = props.match.params.id as string
  const history = useHistory()
  const [form] = Form.useForm()
  const [fetchUpdateUser, { data: userUpdateData, called: userUpdateCalled, loading: userUpdateLoading, error: userUpdateError }] = useUpdateUserByAdminMutation({ onError: () => {} })
  const { data: roleData, loading: roleLoading, error: roleError } = useGetRolesQuery({ fetchPolicy: 'no-cache' })
  const { data: userData, loading: userLoading, error: userError } = useGetUserQuery({
    fetchPolicy: 'no-cache',
    variables: {
      input: { id: id, relations: ['roles'] },
    },
  })

  useEffect(() => {
    if (userLoading || userError) return
    form.setFieldsValue({
      email: userData?.getUser.email,
      roles: (userData?.getUser.roles || []).map(e => e.id),
    })
  }, [userData, userLoading, userError])

  const handleUpdate = async () => {
    try {
      const data = await form.validateFields()
      let { roles } = data
      roles = (roles || []).map((id: string) => ({
        id,
      }))

      fetchUpdateUser({
        variables: {
          input: {
            id: id,
            roles,
          },
        },
      })
    } catch (error) {}
  }

  useEffect(() => {
    if (!userUpdateCalled || userUpdateLoading) return
    const notiFnc = userUpdateError ? notification.error : notification.success
    notiFnc({
      message: userUpdateError ? MESSAGES.updateFailed : MESSAGES.updateSuccessfully,
    })
    history.push('/user/list')
  }, [userUpdateCalled, userUpdateLoading, userUpdateError, userUpdateData])

  const convertToOption = (list: any) => {
    return list?.map(item => (
      <Option value={item.id as string} key={item.id as string}>
        {item.title}
      </Option>
    ))
  }

  const renderRolesList = useMemo(() => {
    if (roleLoading || roleError) return null
    return convertToOption((roleData?.getRoles || []).filter(role => !role.isDefault))
  }, [roleData, roleLoading, roleError])

  return (
    <div style={{ paddingTop: 20, paddingBottom: 20 }}>
      <Title>Chỉnh sửa thông tin người dùng</Title>
      <Divider plain> {userData?.getUser?.email || 'loading...'} </Divider>
      {!roleLoading && roleError && <Alert type="error" message={roleError.message} banner />}
      <Spin tip="Loading..." spinning={roleLoading}>
        <Form layout="vertical" form={form} onFinish={handleUpdate}>
          <Row gutter={24}>
            <Col span={12}>
              <Form.Item hasFeedback label="Họ và tên" name={'fullName'} rules={[{}]}>
                <Input />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item hasFeedback label="Tên người dùng" name={'userName'} rules={[{}]}>
                <Input placeholder="Nhập tên người dùng" />
              </Form.Item>
            </Col>
          </Row>
          <Row gutter={24}>
            <Col span={12}>
              <Form.Item hasFeedback label="Email" name={'email'} rules={[{ required: true }]}>
                <Input disabled />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item hasFeedback label="Số điện thoại" name={'mobile'}>
                <Input placeholder="Nhập số điện thoại" />
              </Form.Item>
            </Col>
          </Row>
          <Form.Item hasFeedback label="Phân quyền người dùng" name={'roles'} rules={[{ message: 'Vui lòng chọn quyền!', type: 'array' }]}>
            <Select mode="multiple" placeholder="Chọn quyền">
              {renderRolesList}
            </Select>
          </Form.Item>
          <Form.Item>
            <Button type="primary" htmlType="submit">
              Tạo
            </Button>
          </Form.Item>
        </Form>
      </Spin>
    </div>
  )
}
