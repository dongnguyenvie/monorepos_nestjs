import React, { useCallback, useEffect, useMemo, useState } from 'react'
import { Alert, Table, Form, Space, Popconfirm, Tag, Typography, notification, Select, Divider, Button } from 'antd'
import { DeleteTwoTone, EditTwoTone } from '@ant-design/icons'
import moment from 'moment'
import '../style.scss'
import { getPathByName } from 'utils/utils'
import { useHistory } from 'react-router'
import { MESSAGES, TABLE_DROPDOWN_OPTIONS } from 'utils/constants'
import { ListWithOptions } from 'app/components/list-with-options'
import { useSelector } from 'react-redux'
import { selectMe } from 'app/redux/user/selectors'
import { RolesConstants } from 'utils/roles'
import { useDeleteUserMutation, useGetDeletedUsersLazyQuery, useGetUsersLazyQuery, useRecoverUserMutation } from 'graphql/autogenerated'
const { Title } = Typography

export function ListUserPage() {
  const me = useSelector(selectMe)
  const [fetchUsersActive, { data: userData, loading: userLoading, error: userError, refetch: usersRefetch }] = useGetUsersLazyQuery({
    fetchPolicy: 'no-cache',
    variables: { input: { pagination: { limit: 1000, page: 1, totalCount: -1 } } },
  })
  const [fetchUsersWasDeleted, { data: userDeletedData, loading: userDeletedLoading, error: userDeletedError, refetch: usersDeletedRefetch }] = useGetDeletedUsersLazyQuery({
    fetchPolicy: 'no-cache',
    variables: { input: { pagination: { limit: 1000, page: 1, totalCount: -1 } } },
  })
  const [fetchDeleteUser, { data: dataDelete, loading: loadingDelete, error: errorDelete, called: calledDelete }] = useDeleteUserMutation({ fetchPolicy: 'no-cache' })
  const [fetchRecoverUser, { data: dataRecoverUser, loading: loadingRecoverUser, error: errorRecoverUser, called: calledRecoverUser }] = useRecoverUserMutation({ fetchPolicy: 'no-cache' })

  const [dropdownOpt, setDropdownOpt] = useState(TABLE_DROPDOWN_OPTIONS.active.value)
  const [form] = Form.useForm()
  const history = useHistory()

  const isUserActive = useMemo(() => {
    return dropdownOpt === TABLE_DROPDOWN_OPTIONS.active.value
  }, [dropdownOpt])

  const fetchList = () => {
    switch (dropdownOpt) {
      case TABLE_DROPDOWN_OPTIONS.active.value: {
        fetchUsersActive()
        return
      }

      case TABLE_DROPDOWN_OPTIONS.deleted.value: {
        fetchUsersWasDeleted()
        return
      }
    }
  }

  useEffect(() => {
    if (!calledDelete || loadingDelete) return
    const notiFnc = errorDelete ? notification.error : notification.success
    notiFnc({
      message: errorDelete ? MESSAGES.deleteFailed : MESSAGES.deleteSuccessfully,
    })
    fetchList()
  }, [dataDelete, errorDelete, loadingDelete, calledDelete])

  useEffect(() => {
    if (!calledRecoverUser || loadingRecoverUser) return
    const notiFnc = errorRecoverUser ? notification.error : notification.success
    notiFnc({
      message: errorRecoverUser ? MESSAGES.recoverFailed : MESSAGES.recoverSuccessfully,
    })
    fetchList()
  }, [dataRecoverUser, errorRecoverUser, loadingRecoverUser, calledRecoverUser])

  useEffect(() => {
    fetchList()
  }, [dropdownOpt])

  const handleEdit = useCallback(
    record => {
      const pathname = getPathByName('user-edit', { id: record.id })
      history.push({ pathname })
    },
    [history],
  )

  const handleDelete = id => {
    fetchDeleteUser({
      variables: {
        input: { id: id },
      },
    })
  }

  const handleRecoverUser = id => {
    fetchRecoverUser({
      variables: {
        input: { id: id },
      },
    })
  }

  const columns = [
    {
      title: 'Email',
      dataIndex: 'email',
      key: 'email',
    },
    {
      title: 'Người dùng',
      dataIndex: 'username',
      key: 'username',
    },
    {
      title: 'Cập nhật',
      dataIndex: 'updatedAt',
      key: 'updatedAt',
      render: (time, record) => {
        return <div>{moment(time).format('MM-DD-YYYY HH:mm:ss')}</div>
      },
    },
    {
      title: 'Nhóm quyền',
      dataIndex: 'roles',
      width: '40%',
      render: (roles, record) => {
        return (
          <div className="role_page__100_scroll">
            {(roles || []).map(role => (
              <Tag color="geekblue" key={role.id}>
                {role.title}
              </Tag>
            ))}
          </div>
        )
      },
    },
    {
      title: '',
      key: 'action',
      render: (_, record) => {
        if (isUserActive) {
          return (
            <Space size="middle">
              <Button type="primary" onClick={() => handleEdit(record)}>
                Sửa
              </Button>
              <Popconfirm title="Bạn có chắc xoá user này không?" onConfirm={() => handleDelete(record.id)}>
                <Button type="primary">Xóa</Button>
              </Popconfirm>
            </Space>
          )
        }
        return (
          <Space size="middle">
            <Button type="primary" onClick={() => handleRecoverUser(record.id)}>
              Khôi phục
            </Button>
          </Space>
        )
      },
    },
  ]

  const tableResource = useMemo(() => {
    return (isUserActive ? userData?.getUsers.data : userDeletedData?.getDeletedUsers.data) || []
  }, [userData, userDeletedData, isUserActive])

  return (
    <div style={{ paddingTop: 20, paddingBottom: 20 }}>
      <Title>Danh sách thành viên</Title>
      <Divider plain></Divider>
      {!userLoading && userError && <Alert type="error" message={userError?.message} banner />}
      <ListWithOptions isDeletedList={!!me.scp?.includes(RolesConstants.getUsersWasDeleted)} onChange={setDropdownOpt} />
      <Form form={form} component={false}>
        <Table dataSource={tableResource} loading={userLoading} pagination={{ pageSize: 10 }} columns={columns} rowKey="id" />
      </Form>
    </div>
  )
}
