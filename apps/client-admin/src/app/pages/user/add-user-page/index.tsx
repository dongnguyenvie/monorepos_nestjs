import React, { useEffect, useMemo } from 'react'
import { useGetRolesQuery } from 'graphql/autogenerated'
import '../style.scss'
import { Row, Col, Typography, Input, Form, Button, Select, Alert, notification } from 'antd'
import { MESSAGES } from 'utils/constants'
import { Spin } from 'app/components/Spin'
const { Title } = Typography
const { Option } = Select

export function AddUserPage() {
  const [form] = Form.useForm()
  const { data: roleData, loading: roleLoading, error: roleError } = useGetRolesQuery({ fetchPolicy: 'no-cache' })
  // const [handleCreateUser, { data, loading, error, called }] = useCreateUserMutation({
  //   onError: () => {},
  // })

  // useEffect(() => {
  //   if (!called || loading) return
  //   const notiFnc = error ? notification.error : notification.success
  //   notiFnc({
  //     message: error ? MESSAGES.createFailed : MESSAGES.createSuccessfully,
  //   })
  //   form.resetFields()
  // }, [data, error, loading, called])

  const handleCreate = async () => {
    const row = await form.validateFields()
  }

  const convertToOption = (list: any) => {
    return list?.map(item => (
      <Option value={item.id as string} key={item.id as string}>
        {item.title}
      </Option>
    ))
  }

  const renderRolesList = useMemo(() => {
    if (roleLoading || roleError) return null
    return convertToOption((roleData?.getRoles || []).filter(role => !role.isDefault))
  }, [roleData, roleLoading, roleError])
  return (
    <div style={{ paddingTop: 20, paddingBottom: 20 }}>
      <Title>Thêm mới người dùng</Title>
      {!roleLoading && roleError && <Alert type="error" message={roleError.message} banner />}
      <Spin tip="Loading..." spinning={roleLoading}>
        <Form layout="vertical" form={form} onFinish={handleCreate}>
          <Row gutter={24}>
            <Col span={12}>
              <Form.Item hasFeedback label="Họ và tên" name={'fullName'} rules={[{ required: true }]}>
                <Input placeholder="Nhập họ và tên" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item hasFeedback label="Tên người dùng" name={'userName'} rules={[{ required: true }]}>
                <Input placeholder="Nhập tên người dùng" />
              </Form.Item>
            </Col>
          </Row>
          <Row gutter={24}>
            <Col span={12}>
              <Form.Item hasFeedback label="Email" name={'email'} rules={[{ required: true }]}>
                <Input placeholder="Nhập địa chỉ email" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item hasFeedback label="Số điện thoại" name={'mobile'}>
                <Input placeholder="Nhập số điện thoại" />
              </Form.Item>
            </Col>
          </Row>
          <Form.Item hasFeedback label="Phân quyền người dùng" name={'roles'} rules={[{ required: true, message: 'Vui lòng chọn quyền!', type: 'array' }]}>
            <Select mode="multiple" placeholder="Chọn quyền">
              {renderRolesList}
            </Select>
          </Form.Item>
          <Form.Item>
            <Button type="primary" htmlType="submit">
              Tạo
            </Button>
          </Form.Item>
        </Form>
      </Spin>
    </div>
  )
}
