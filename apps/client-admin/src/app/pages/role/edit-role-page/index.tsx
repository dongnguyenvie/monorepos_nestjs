import React, { useEffect, useMemo } from 'react'
import { usePermissionsQuery, useGetRoleByIdQuery, useUpdateRoleMutation } from 'graphql/autogenerated'
import '../style.scss'
import { Checkbox, Row, Col, Typography, Divider, Input, Form, Button, Tag, notification, Tooltip } from 'antd'
import { ReloadOutlined, WifiOutlined } from '@ant-design/icons'
import { MESSAGES } from 'utils/constants'
import { DescriptionAPI } from 'utils/description-api.helper'
import _get from 'lodash/get'
import _keyBy from 'lodash/keyBy'

const { Title } = Typography

const boxStyle = {
  border: '1px dashed gray',
  padding: '10px',
  borderRadius: '5px',
  marginBottom: '11px',
}
export function EditRolePage(props: any) {
  const id = props.match.params.id as string
  const { data: roleData, loading: roleLoading, error: roleError } = useGetRoleByIdQuery({ fetchPolicy: 'no-cache', variables: { input: { id: id } } })
  const { data: scopeData, loading: scopeLoading, error: scopeError, refetch: scopeRefetch } = usePermissionsQuery({ fetchPolicy: 'no-cache' })
  const [fetchUpdateRole, { data: updateData, loading: updateLoading, error: updateError, called: updateCalled }] = useUpdateRoleMutation({ onError: () => {} })

  const [form] = Form.useForm()

  const scopeList = useMemo(() => {
    const values = Object.values(scopeData?.__schema || {})
    return values
      .flatMap((x: any) => x?.fields || [])
      .map(x => ({
        api: DescriptionAPI.fromString(x.description),
        name: x.name,
      })) as { api: DescriptionAPI; name: string }[]
  }, [scopeData])

  const scopePrivateList = useMemo(() => {
    return scopeList.filter(f => !f.api.isPublic)
  }, [scopeList])

  const scopePublicList = useMemo(() => {
    return scopeList.filter(f => f.api.isPublic)
  }, [scopeList])

  const scopePublicListGroup = useMemo(() => {
    return scopePublicList.reduce((acc, cur) => {
      if (!acc[cur.api.group as string]) {
        acc[cur.api.group as string] = []
      }
      acc[cur.api.group as string].push(cur)
      return acc
    }, {})
  }, [scopePublicList])

  const scopePrivateListGroup = useMemo(() => {
    return scopePrivateList.reduce((acc, cur) => {
      if (!acc[cur.api.group as string]) {
        acc[cur.api.group as string] = []
      }
      acc[cur.api.group as string].push(cur)
      return acc
    }, {})
  }, [scopePrivateList])

  const scopePrivateListGroupKeys = useMemo(() => {
    return Object.keys(scopePrivateListGroup) || []
  }, [scopePrivateListGroup])

  const scopePublicListGroupKeys = useMemo(() => {
    return Object.keys(scopePublicListGroup) || []
  }, [scopePublicListGroup])

  useEffect(() => {
    if (roleLoading || roleError) return
    form.setFieldsValue({
      title: roleData?.getRoleById.title,
      scp: roleData?.getRoleById.scp,
      isDefault: !!roleData?.getRoleById.isDefault,
    })
  }, [roleLoading, roleError, roleData, form])

  useEffect(() => {
    if (!updateCalled || updateLoading) return
    const notiFnc = updateError ? notification.error : notification.success
    notiFnc({
      message: updateError ? MESSAGES.updateFailed : MESSAGES.updateSuccessfully,
    })
  }, [updateCalled, updateError, updateLoading, updateData])

  const handleUpdate = async (values: any) => {
    try {
      const data = await form.validateFields()
      fetchUpdateRole({
        variables: {
          input: {
            id: id,
            ...(data as any),
          },
        },
      })
    } catch (error) {}
  }

  const handleOnChange = (values: any) => {}

  return (
    <div style={{ paddingTop: 20, paddingBottom: 20 }}>
      <Title>Chỉnh sửa quyền</Title>
      <Divider plain>
        Nếu bạn không thấy dữ liệu, Vui lòng ấn{' '}
        <b onClick={() => scopeRefetch()} className="role_page__cursor_point">
          vào đây <ReloadOutlined />
        </b>
      </Divider>
      <div>
        <p>
          <b style={{ color: 'red' }}>(+)</b>: API cấp cao, thường xài cho admin
        </p>
        <p>
          <WifiOutlined style={{ color: 'red' }} />: API realtime socket
        </p>
      </div>
      <Divider plain></Divider>
      <div>
        <Form layout="vertical" form={form} onFinish={handleUpdate} onFieldsChange={handleOnChange}>
          <Form.Item label="Tên nhóm" name={'title'} rules={[{ required: true }]}>
            <Input placeholder="..." />
          </Form.Item>
          <Form.Item label="Cấp quyền này thành quyền mặc định cho tất cả thành viên" name="isDefault" valuePropName="checked" rules={[]}>
            <Checkbox>Có / Không</Checkbox>
          </Form.Item>

          <Form.Item label="Quyền hạn" name={'scp'} rules={[{ required: true, message: 'Quyền không được để trống' }]}>
            <Checkbox.Group style={{ width: '100%' }}>
              {scopePrivateListGroupKeys.map(groupNm => (
                <Form.Item label={groupNm} key={groupNm}>
                  <Row gutter={16} style={boxStyle}>
                    {_get(scopePrivateListGroup, groupNm, []).map(info => (
                      <Col span={12} key={info.name}>
                        <Tooltip placement="top" title={info.name}>
                          <Checkbox value={info.name} className="rolepage__checkbox_hover">
                            {_get(info, 'api.title', info.name)} {!!info.api.isSystem && <b style={{ color: 'red' }}>(+)</b>}
                            {info.api.isSub && <WifiOutlined style={{ color: 'red' }} />}
                          </Checkbox>
                        </Tooltip>
                      </Col>
                    ))}
                  </Row>
                </Form.Item>
              ))}
            </Checkbox.Group>
          </Form.Item>

          <Form.Item label="Quyền mặc định">
            <div className="role_page__default_scp">
              {scopePublicListGroupKeys.map(groupNm => (
                <>
                  <div style={boxStyle} key={groupNm}>
                    <b>{groupNm}: </b>
                    {_get(scopePublicListGroup, groupNm, []).map(info => (
                      <Tooltip placement="top" title={info.api.title} key={info.name}>
                        <Tag className="role_page__default_scp_tag" key={info.name}>
                          {_get(info, 'api.title', info.name)} {!!info.api.isSystem && <b style={{ color: 'red' }}>(+)</b>}
                          {info.api.isSub && <WifiOutlined style={{ color: 'red' }} />}
                        </Tag>
                      </Tooltip>
                    ))}
                  </div>
                </>
              ))}
            </div>
          </Form.Item>

          <Form.Item>
            <Button type="primary" htmlType="submit">
              Update nhóm vai trò
            </Button>
          </Form.Item>
        </Form>
      </div>
    </div>
  )
}
